// Code generated by MockGen. DO NOT EDIT.
// Source: cache/cache.go

// Package mockgen is a generated GoMock package.
package mockgen

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCacher is a mock of Cacher interface.
type MockCacher struct {
	ctrl     *gomock.Controller
	recorder *MockCacherMockRecorder
}

// MockCacherMockRecorder is the mock recorder for MockCacher.
type MockCacherMockRecorder struct {
	mock *MockCacher
}

// NewMockCacher creates a new mock instance.
func NewMockCacher(ctrl *gomock.Controller) *MockCacher {
	mock := &MockCacher{ctrl: ctrl}
	mock.recorder = &MockCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacher) EXPECT() *MockCacherMockRecorder {
	return m.recorder
}

// EndpointRules mocks base method.
func (m *MockCacher) EndpointRules(uri string) (bool, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndpointRules", uri)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// EndpointRules indicates an expected call of EndpointRules.
func (mr *MockCacherMockRecorder) EndpointRules(uri interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointRules", reflect.TypeOf((*MockCacher)(nil).EndpointRules), uri)
}

// Get mocks base method.
func (m *MockCacher) Get(key string, w http.ResponseWriter) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key, w)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockCacherMockRecorder) Get(key, w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacher)(nil).Get), key, w)
}

// Set mocks base method.
func (m *MockCacher) Set(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, value)
}

// Set indicates an expected call of Set.
func (mr *MockCacherMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacher)(nil).Set), key, value)
}
