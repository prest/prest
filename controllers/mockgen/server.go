// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/config.go

// Package mockgen is a generated GoMock package.
package mockgen

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	adapters "github.com/prest/prest/adapters"
	controllers "github.com/prest/prest/controllers"
)

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockServer) Auth(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Auth", w, r)
}

// Auth indicates an expected call of Auth.
func (mr *MockServerMockRecorder) Auth(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockServer)(nil).Auth), w, r)
}

// BatchInsertInTables mocks base method.
func (m *MockServer) BatchInsertInTables(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BatchInsertInTables", w, r)
}

// BatchInsertInTables indicates an expected call of BatchInsertInTables.
func (mr *MockServerMockRecorder) BatchInsertInTables(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInsertInTables", reflect.TypeOf((*MockServer)(nil).BatchInsertInTables), w, r)
}

// DeleteFromTable mocks base method.
func (m *MockServer) DeleteFromTable(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteFromTable", w, r)
}

// DeleteFromTable indicates an expected call of DeleteFromTable.
func (mr *MockServerMockRecorder) DeleteFromTable(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromTable", reflect.TypeOf((*MockServer)(nil).DeleteFromTable), w, r)
}

// ExecuteFromScripts mocks base method.
func (m *MockServer) ExecuteFromScripts(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExecuteFromScripts", w, r)
}

// ExecuteFromScripts indicates an expected call of ExecuteFromScripts.
func (mr *MockServerMockRecorder) ExecuteFromScripts(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteFromScripts", reflect.TypeOf((*MockServer)(nil).ExecuteFromScripts), w, r)
}

// GetAdapter mocks base method.
func (m *MockServer) GetAdapter() adapters.Adapter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdapter")
	ret0, _ := ret[0].(adapters.Adapter)
	return ret0
}

// GetAdapter indicates an expected call of GetAdapter.
func (mr *MockServerMockRecorder) GetAdapter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdapter", reflect.TypeOf((*MockServer)(nil).GetAdapter))
}

// GetDatabases mocks base method.
func (m *MockServer) GetDatabases(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetDatabases", w, r)
}

// GetDatabases indicates an expected call of GetDatabases.
func (mr *MockServerMockRecorder) GetDatabases(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabases", reflect.TypeOf((*MockServer)(nil).GetDatabases), w, r)
}

// GetSchemas mocks base method.
func (m *MockServer) GetSchemas(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetSchemas", w, r)
}

// GetSchemas indicates an expected call of GetSchemas.
func (mr *MockServerMockRecorder) GetSchemas(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemas", reflect.TypeOf((*MockServer)(nil).GetSchemas), w, r)
}

// GetTables mocks base method.
func (m *MockServer) GetTables(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetTables", w, r)
}

// GetTables indicates an expected call of GetTables.
func (mr *MockServerMockRecorder) GetTables(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTables", reflect.TypeOf((*MockServer)(nil).GetTables), w, r)
}

// GetTablesByDatabaseAndSchema mocks base method.
func (m *MockServer) GetTablesByDatabaseAndSchema(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetTablesByDatabaseAndSchema", w, r)
}

// GetTablesByDatabaseAndSchema indicates an expected call of GetTablesByDatabaseAndSchema.
func (mr *MockServerMockRecorder) GetTablesByDatabaseAndSchema(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTablesByDatabaseAndSchema", reflect.TypeOf((*MockServer)(nil).GetTablesByDatabaseAndSchema), w, r)
}

// InsertInTables mocks base method.
func (m *MockServer) InsertInTables(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertInTables", w, r)
}

// InsertInTables indicates an expected call of InsertInTables.
func (mr *MockServerMockRecorder) InsertInTables(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertInTables", reflect.TypeOf((*MockServer)(nil).InsertInTables), w, r)
}

// Plugin mocks base method.
func (m *MockServer) Plugin(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Plugin", w, r)
}

// Plugin indicates an expected call of Plugin.
func (mr *MockServerMockRecorder) Plugin(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Plugin", reflect.TypeOf((*MockServer)(nil).Plugin), w, r)
}

// SelectFromTables mocks base method.
func (m *MockServer) SelectFromTables(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SelectFromTables", w, r)
}

// SelectFromTables indicates an expected call of SelectFromTables.
func (mr *MockServerMockRecorder) SelectFromTables(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromTables", reflect.TypeOf((*MockServer)(nil).SelectFromTables), w, r)
}

// ShowTable mocks base method.
func (m *MockServer) ShowTable(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShowTable", w, r)
}

// ShowTable indicates an expected call of ShowTable.
func (mr *MockServerMockRecorder) ShowTable(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowTable", reflect.TypeOf((*MockServer)(nil).ShowTable), w, r)
}

// UpdateTable mocks base method.
func (m *MockServer) UpdateTable(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateTable", w, r)
}

// UpdateTable indicates an expected call of UpdateTable.
func (mr *MockServerMockRecorder) UpdateTable(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTable", reflect.TypeOf((*MockServer)(nil).UpdateTable), w, r)
}

// WrappedHealthCheck mocks base method.
func (m *MockServer) WrappedHealthCheck(checks controllers.CheckList) http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WrappedHealthCheck", checks)
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// WrappedHealthCheck indicates an expected call of WrappedHealthCheck.
func (mr *MockServerMockRecorder) WrappedHealthCheck(checks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrappedHealthCheck", reflect.TypeOf((*MockServer)(nil).WrappedHealthCheck), checks)
}
