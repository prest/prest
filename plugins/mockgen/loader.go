// Code generated by MockGen. DO NOT EDIT.
// Source: plugins/loader.go

// Package mockgen is a generated GoMock package.
package mockgen

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	plugins "github.com/prest/prest/plugins"
)

// MockLoader is a mock of Loader interface.
type MockLoader struct {
	ctrl     *gomock.Controller
	recorder *MockLoaderMockRecorder
}

// MockLoaderMockRecorder is the mock recorder for MockLoader.
type MockLoaderMockRecorder struct {
	mock *MockLoader
}

// NewMockLoader creates a new mock instance.
func NewMockLoader(ctrl *gomock.Controller) *MockLoader {
	mock := &MockLoader{ctrl: ctrl}
	mock.recorder = &MockLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoader) EXPECT() *MockLoaderMockRecorder {
	return m.recorder
}

// LoadFunc mocks base method.
func (m *MockLoader) LoadFunc(fileName, funcName string, r *http.Request) (plugins.PluginFuncReturn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadFunc", fileName, funcName, r)
	ret0, _ := ret[0].(plugins.PluginFuncReturn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadFunc indicates an expected call of LoadFunc.
func (mr *MockLoaderMockRecorder) LoadFunc(fileName, funcName, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFunc", reflect.TypeOf((*MockLoader)(nil).LoadFunc), fileName, funcName, r)
}
