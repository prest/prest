// Code generated by MockGen. DO NOT EDIT.
// Source: healthcheck.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockDbConnection is a mock of DbConnection interface.
type MockDbConnection struct {
	ctrl     *gomock.Controller
	recorder *MockDbConnectionMockRecorder
}

// MockDbConnectionMockRecorder is the mock recorder for MockDbConnection.
type MockDbConnectionMockRecorder struct {
	mock *MockDbConnection
}

// NewMockDbConnection creates a new mock instance.
func NewMockDbConnection(ctrl *gomock.Controller) *MockDbConnection {
	mock := &MockDbConnection{ctrl: ctrl}
	mock.recorder = &MockDbConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbConnection) EXPECT() *MockDbConnectionMockRecorder {
	return m.recorder
}

// GetConnection mocks base method.
func (m *MockDbConnection) GetConnection() (*sqlx.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection")
	ret0, _ := ret[0].(*sqlx.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnection indicates an expected call of GetConnection.
func (mr *MockDbConnectionMockRecorder) GetConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockDbConnection)(nil).GetConnection))
}

// RunTestQuery mocks base method.
func (m *MockDbConnection) RunTestQuery() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTestQuery")
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTestQuery indicates an expected call of RunTestQuery.
func (mr *MockDbConnectionMockRecorder) RunTestQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTestQuery", reflect.TypeOf((*MockDbConnection)(nil).RunTestQuery))
}
